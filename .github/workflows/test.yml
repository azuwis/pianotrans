name: Test
permissions: {}
on:
  pull_request:
    paths-ignore:
    - '**.md'
    - 'screenshots/**'
    - 'windows/**'
  push:
    paths-ignore:
    - '**.md'
    - 'screenshots/**'
    - 'windows/**'
  workflow_dispatch:
    inputs:
      debug:
        description: Enable debug
        type: boolean
        required: false
        default: false
      os:
        description: OS to run
        type: choice
        options:
          - linux
          - darwin
          - aarch64-linux
          - x86_64-linux
          - aarch64-darwin
          - x86_64-darwin
          - all
        default: all
      pianotrans:
        description: Variant to run
        type: choice
        options:
          - pianotrans
          - pianotrans-amd-blis
          - pianotrans-bin
          - pianotrans-blis
          - pianotrans-cuda
          - pianotrans-mkl
          - all
        default: all
jobs:
  transcribe:
    strategy:
      fail-fast: false
      matrix:
        os: >-
          ${{ fromJSON(
            inputs.os == 'linux' && '["ubuntu-latest", "ubuntu-24.04-arm"]' || (
            inputs.os == 'darwin' && '["macos-latest", "macos-15-intel"]' || (
            inputs.os == 'aarch64-linux' && '["ubuntu-24.04-arm"]' || (
            inputs.os == 'x86_64-linux' && '["ubuntu-latest"]' || (
            inputs.os == 'aarch64-darwin' && '["macos-latest"]' || (
            inputs.os == 'x86_64-darwin' && '["macos-15-intel"]' || (
            '["ubuntu-24.04-arm", "ubuntu-latest", "macos-latest", "macos-15-intel"]'
          ))))))) }}
        pianotrans: >-
          ${{ fromJSON(
            inputs.os == 'pianotrans' && '["pianotrans"]' || (
            inputs.os == 'pianotrans-amd-blis' && '["pianotrans-amd-blis"]' || (
            inputs.os == 'pianotrans-bin' && '["pianotrans-bin"]' || (
            inputs.os == 'pianotrans-blis' && '["pianotrans-blis"]' || (
            inputs.os == 'pianotrans-cuda' && '["pianotrans-cuda"]' || (
            inputs.os == 'pianotrans-mkl' && '["pianotrans-mkl"]' || (
            '["pianotrans", "pianotrans-amd-blis", "pianotrans-bin", "pianotrans-blis", "pianotrans-cuda", "pianotrans-mkl"]'
          ))))))) }}
        exclude:
        - {os: macos-15-intel, pianotrans: pianotrans-amd-blis}
        - {os: macos-15-intel, pianotrans: pianotrans-blis}
        - {os: macos-15-intel, pianotrans: pianotrans-bin}
        - {os: macos-15-intel, pianotrans: pianotrans-cuda}
        - {os: macos-15-intel, pianotrans: pianotrans-mkl}
        - {os: macos-latest, pianotrans: pianotrans-amd-blis}
        - {os: macos-latest, pianotrans: pianotrans-blis}
        - {os: macos-latest, pianotrans: pianotrans-cuda}
        - {os: macos-latest, pianotrans: pianotrans-mkl}
        - {os: ubuntu-24.04-arm, pianotrans: pianotrans-amd-blis}
        - {os: ubuntu-24.04-arm, pianotrans: pianotrans-bin} # nccl(cuda on arm?) takes > 1h to build
        - {os: ubuntu-24.04-arm, pianotrans: pianotrans-blis}
        - {os: ubuntu-24.04-arm, pianotrans: pianotrans-cuda}
        - {os: ubuntu-24.04-arm, pianotrans: pianotrans-mkl}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
    - uses: azuwis/actions/nix@main
      with:
        key: nix-${{ matrix.pianotrans }}
        debug: ${{ inputs.debug }}
    - uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
      with:
        name: azuwis
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: nix-community
        # pushFilter: (-source$|\.whl$)
    - name: Build pianotrans
      env:
        PIANOTRANS: ${{ matrix.pianotrans }}
      run: |
        # build pianotrans, and create profile to prevent gc
        echo "Build $PIANOTRANS"
        nix -L build ".#$PIANOTRANS" --profile ~/.local/state/nix/profiles/pianotrans
    - name: Test transcribe
      run: |
        ~/.local/state/nix/profiles/pianotrans/bin/pianotrans --cli test/cut_liszt.opus test/cut_liszt.opus test/cut_liszt.opus | tee /tmp/transcribe.log
        time=$(awk 'BEGIN {ORS=" "} /Transcribe time:/ {print $3}' /tmp/transcribe.log)
        echo "::notice::Transcribe time: $time"
        test -e test/cut_liszt.opus.mid
    - uses: azuwis/actions/nix/post@main
